Magesh Kuppan

Schedule
    Commence    : 10:00 Hrs
    Tea Break   : 11:30 Hrs (20 mins)
    Lunch Break : 13:30 (1 Hr)
    Tea Break   : 16:00 (20 mins)
    Wind Up     : 18:00 

Breakup:
    ES6 & TypeScript (1 Day)
    Advanced Typescript (1 Day)
    Angular (4 Days)
    State Management (2 Days)

About You
    Name
    Total Experience
    Primary Skillset
    Experience in Angular.js / Angular / React / Vue.js


Dart

CoffeeScript
TypeScript
Script#

ES6 (ECMAScript 6 / ES2015 / ESNext)

1. let (block scoped)
2. const
3. array destructuring
4. rest operator (array)
5. spread operator (array)
6. object destructuring
7. rest operator (object)
8. spread operator (object)
9. default arguments
10. arrow functions
11. object construction enhancement


ES5
function addEven(){
    var evenNumbers = Array.prototype.filter.call(arguments, function(no){
        return no % 2 === 0;
    })
    var result = 0;
    for (var i=0; i < evenNumbers.length ; i++){
        result += evenNumbers[i]
    }
    return result;
}

in ES6
function addEven(...nos){
    return nos.filter(no => no % 2 === 0)
        .reduce((result, evenNo) => result + evenNo, 0)
}

const addEven = (...nos) => nos.filter(no => no % 2 === 0)
        .reduce((result, evenNo) => result + evenNo, 0);


var products = [
	{id : 6, name : 'Pen', cost : 50, units : 20, category : 'stationary'},
	{id : 9, name : 'Ten', cost : 70, units : 70, category : 'stationary'},
	{id : 3, name : 'Len', cost : 60, units : 60, category : 'grocery'},
	{id : 5, name : 'Zen', cost : 30, units : 30, category : 'grocery'},
	{id : 1, name : 'Ken', cost : 20, units : 80, category : 'utencil'}
];

1. Find the costliest product 
    products.reduce((result, product) => result.cost > product.cost ? result : product)

2. Find the product that has the least stock
    products.reduce((result, product) => result.units < product.units ? result : product)

3. Group the products by category
    products.reduce(
        (result, product) => {
            (result[product.category] = result[product.category] || []).push(product);
            return result;
        },
        {}
    )

Step: 1
    1. filter
    2. forEach
    3. reduce
    4. map

Step : 2    
    Functional Programming

Step : 3
    underscore
    lodash


Class
class Employee{
    id = 0;
    name = '';
    salary = 0;
    
    constructor(id, name, salary){
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    display(){
        console.log(this.id, this.name, this.salary);
    }
}

var emp = new Employee(100, 'Magesh', 10000)

ES5
/*
function Employee(id, name, salary){
    this.id = id;
    this.name = name;
    this.salary = salary;
    this.display = function(){
        console.log(this.id, this.name, this.salary);
    }
}
*/

function Employee(id, name, salary){
    this.id = id;
    this.name = name;
    this.salary = salary;
}
Employee.prototype.display = function(){
    console.log(this.id, this.name, this.salary);
}

//class with private attributes & getters and setters

class Employee{
    #id = 0;
    #name = '';
    #salary = 0;

    get id(){
        //console.log('getter for id triggered')
        return this.#id;
    }
    set id(value){
        //console.log('setter for id triggered')
        //do validations
        this.#id = value;
    }

    get name(){
        //console.log('getter for name triggered')
        return this.#name;
    }
    set name(value){
        //console.log('setter for name triggered')
        this.#name = value;
    }

    get salary(){
        //console.log('getter for salary triggered')
        return this.#salary;
    }
    set salary(value){
        //console.log('setter for salary triggered')
        this.#salary = value;
    }

    constructor(id, name, salary){
        this.#id = id;
        this.#name = name;
        this.#salary = salary;
    }

    display(){
        console.log(this.#id, this.#name, this.#salary);
    }
}

//class Inheritance

class FulltimeEmployee extends Employee{
    benefits = '';
    constructor(id, name, salary, benefits){
        super(id, name, salary);
        this.benefits = benefits;
    }

    display(){
        super.display();
        console.log(this.benefits);
    }

}


//iterators
var nos = [3,1,4,2,5]

for (let idx=0; idx < nos.length; idx++){
    console.log(nos[idx]);
}

for (let no of nos){
    console.log(no)
}

//custom iterators
function getFibonacci(count){
    let fibonacci = {
        [Symbol.iterator](){
            let prev = 0, curr = 1;
            let counter = 0;
            return {
                next(){
                    if (counter > count){
                        return { value : undefined, done : true }
                    } else {
                        [prev, curr, counter] = [curr, prev + curr, counter+1]
                        return { value : curr, done : false }
                    }
                }
            }
        }
    }
    return fibonacci;
}

let fibonacci = getFibonacci(10)

//iterating using for..of construct
for (let fibNo of fibonacci){
    console.log(fibNo)
}

//iterating manually
let iter = fibonacci[Symbol.iterator]();
iter.next();
iter.next();


Generators
===========

A function that can suspend and resume its execution at a later time.

function * genEvenNos(){
    yield 2;
    yield 4;
    yield 6;
    yield 8;
    yield 10;
    return;
}

var gen = genEvenNos()

gen.next()
.
.

OR

for (let evenNo of genEvenNos()){
    console.log(evenNo)
}

Symbol 
===========
A new data type

const Employee = (() => { 
    var idSymbol = Symbol('id')
    class Employee{
        name = '';
        salary = 0;

        constructor(id, name, salary){
            this[idSymbol] = id;
            this.name = name;
            this.salary = salary;
        }
        display(){
            console.log(this[idSymbol], this.name, this.salary);
        }
    }
    return Employee;
})()

template strings
================
var x = 100, y = 200

var s2 = `Sum of ${x} and ${y} is ${x+y}`

var s3 = `Sum of
${x} and ${y}
is ${x+y}`



TypeScript = TypeSafety + JavaScript
    superset of javascript


var x;
x = 10;
x = "hello";
x = true
x = {}

function add(x,y){
    if (typeof x !== 'number' || typeof y !== 'number')
        throw new Error('Invalid arguments');
    return x + y;
}


add(10,20)
add("safd", "dsafs")


var x : number

function add(x : number, y : number) : number {
    return x + y
}

add("dasfs", "asdf")

    |
    |
    V
    tsc
    |
    |
    V

var x 

function add(x , y )  {
    return x + y
}

Enums
Interfaces
Classes
Access Modifiers (private, public, protected)
Modules
Namespaces
Generics


Challenges in UI application
    - Performance
    - Maintainability
    - Security

Maintainability

    - Fixing bugs
    - Adding new features
    - Improving existing features
    - Removing dead features

    - Changing existing code

    Easy Maintainability means easy to change code


Reactive (Dumb) X Proactive (Knowledge)

Angular Building Blocks

    - Module
        Registry of application entities (components, directives, pipes & services)
        Dependency Injection
        Minimum of 1 module should be there
        A module acts as the application starting point

    - Component
        Encapsulation of Presentation + UI Behavior (user interaction) + State (data)
        Can be composed to create complext components

    - Directive
        Responsible for dealing with DOM
        Two types of directives
            - attribute directives
                Manipulates the attributes of existing DOM nodes
                DOES NOT change the structure of the DOM tree  (adding new DOM nodes or removing existing DOM nodes)
                enclosed with '[]'

            - structural directives
                Manipulates the structure of the DOM tree
                Changes the structure of the DOM tree  (adding new DOM nodes or removing existing DOM nodes)
                prefixed with an '*'

    - Pipe
        Transforms data for presentation

    - Service
        Non UI logic


Angular CLI
    - CLI is a command line interface for Angular
    - Installation
        npm install @angular/cli -g

    - To create an angular application
        ng new <app-name>

    - To run the application
        cd <app-name>
        npm start


AMD
CommonJS
ES6 Modules


ES6 Modules 
    - Everything defined in a file is considered private
    - Anything that need to be made public have to be explicitly "exported"
    - If any public entity from another file is needed, they have to be explicitly "imported"

To create a component
    ng generate component <component-name>
    ng g c <component-name>


Implement the calculator component for the following
<h3>Calculator</h3>
<hr>
<input type="number" name="" id="">
<input type="number" name="" id="">
<br>
<input type="button" value="Add">
<input type="button" value="Subtract">
<input type="button" value="Multiply">
<input type="button" value="Divide">
<div></div>

Assignment
==========
implement salary calculator in the "first-app" application


Open Closed Principle
    Your code should be OPEN for extension and CLOSED for modification



class PriceCalculator{
    calculate(products) {
        return products.reduce((total, product) => total + product.price, 0);
    }
}

class FestivePriceCalculator{
    calculate(products) {
        return products.reduce((total, product) => total + product.price, 0) * 0.9;
    }
}


class ShoppingCart{
    products ;

    constructor(pc PriceCalculator){
        this.pc = pc;
    }

    cartValue(){
        return this.pc.calculate(this.products)
    }
}

To install moment.js
npm install moment

How to use the moment library (refer to the main.ts)